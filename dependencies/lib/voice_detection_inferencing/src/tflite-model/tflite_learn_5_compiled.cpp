/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 02.11.2023 05:33:43

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 16
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 4368;
#else
constexpr int kTensorArenaSize = 3344;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_AVERAGE_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,130 } };
const TfArray<1, float> quant0_scale = { 1, { 0.022315375506877899, } };
const TfArray<1, int> quant0_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 10, 13, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 60, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data3[3] = { -16, -12, -4, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00015976370195858181, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[3*60] = { 
  20, 9, 82, -60, 5, 24, 56, -44, -96, 63, -45, -21, 49, -81, 37, 95, -34, -127, 27, -14, -86, 70, 61, 27, -47, -117, 42, -77, -70, -20, 34, -64, -19, 6, -63, -44, 35, -88, -87, 76, -61, -10, 84, 10, 66, -59, 83, -75, 15, 31, -43, -53, -29, -103, 15, 33, 18, -75, 86, -110, 
  48, 49, -12, -20, -26, -21, 20, -52, -10, -10, 9, 37, 10, 39, -8, -39, 29, 77, -28, 14, 54, -32, 2, -31, 50, 7, 50, 81, -18, -31, 47, -37, 111, 17, -32, -75, 65, -78, -64, 12, 12, -52, -81, -40, -62, -67, -47, 65, 22, 15, -50, 10, 9, 49, -22, -73, -25, -40, -120, -19, 
  -56, -35, 0, -2, -125, -23, -72, -4, 94, -22, 71, -54, -91, 47, -26, -17, 23, 11, -20, 83, 39, 35, 22, -49, -97, 91, 8, 31, 57, -15, -21, 29, -104, -2, 56, 78, -25, 79, 85, -10, 26, -44, -31, 59, 30, 72, -42, -49, -22, -89, 33, -20, 41, -36, -51, 54, 15, 99, 67, 67, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 3,60 } };
const TfArray<1, float> quant4_scale = { 1, { 0.005643320269882679, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[5] = { 291, -305, 460, 50, 1237, };
const TfArray<1, int> tensor_dimension5 = { 1, { 5 } };
const TfArray<5, float> quant5_scale = { 5, { 5.6758959544822574e-05, 6.2254817748907954e-05, 7.4453339038882405e-05, 9.239828068530187e-05, 7.1875372668728232e-05, } };
const TfArray<5, int> quant5_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[5*5*5*10] = { 
  /* [0][0][][] */ 26,-74,-34,84,-12,-71,34,7,62,-20, 30,-124,11,59,-30,3,7,-67,-26,-22, 20,1,-6,62,17,-25,78,21,-1,-15, 8,-34,-9,55,6,32,-17,-6,-12,-3, 64,-48,-36,104,67,52,44,21,-35,-29, 
  /* [0][1][][] */ 4,-8,-15,46,-1,-7,-45,-37,61,10, 18,-88,70,53,-69,-9,-2,-75,38,31, -61,18,-8,0,-49,1,52,-38,-66,44, 31,53,33,-8,-55,-65,11,-11,-7,-42, -25,39,63,9,-7,-35,10,13,42,22, 
  /* [0][2][][] */ 3,44,-32,43,0,2,103,13,15,39, -47,-39,15,76,-39,-19,-28,-20,23,38, -5,46,-56,99,0,-57,-1,-78,-25,48, -13,46,-19,72,48,51,-21,-2,42,9, -6,25,23,-29,63,56,53,36,91,41, 
  /* [0][3][][] */ -54,71,35,49,8,-22,21,-22,-9,-64, -10,-22,12,34,-22,-32,-5,3,15,49, 44,-16,1,63,-39,-53,9,-9,-39,36, -39,28,-37,39,-52,12,51,12,51,-55, -34,49,-44,12,7,30,-14,1,-13,-19, 
  /* [0][4][][] */ -88,-49,107,109,-60,-94,-22,-66,-5,62, -23,19,-31,-45,-10,-101,32,3,-95,-110, 34,49,14,11,-43,-127,0,-51,50,-37, 43,-21,-56,45,-61,-50,-36,57,-44,3, 18,27,-60,-55,65,-23,15,-24,12,-45, 
  /* [1][0][][] */ -31,54,-48,51,22,-12,-2,-22,35,-34, -52,86,-47,-12,-32,18,-127,-14,-47,-31, -23,82,-58,50,21,-65,-42,13,26,-47, -23,-57,24,1,-36,-44,-1,-18,29,17, 37,-59,-1,-46,-92,8,20,-89,16,63, 
  /* [1][1][][] */ 37,47,-28,-31,-4,54,-39,31,-30,63, 65,22,18,-31,22,19,-47,12,5,-5, -16,10,-47,-36,54,12,41,24,-19,-47, -41,-5,17,-18,35,86,28,-15,8,54, -40,3,66,3,11,86,-11,-53,20,-16, 
  /* [1][2][][] */ -60,32,32,-92,28,73,12,67,-14,-26, -11,-20,10,-103,51,33,15,53,-26,45, -33,-17,28,-66,100,43,36,67,88,49, -17,12,14,10,46,39,32,32,15,24, -22,23,-44,-9,5,-29,-30,52,-12,5, 
  /* [1][3][][] */ -42,20,-27,5,18,20,-34,22,-53,-47, 2,21,24,-64,50,66,-32,13,18,-12, -35,38,-3,-106,3,15,-37,3,0,58, -15,-23,-5,6,-5,-23,-27,70,11,65, -2,16,34,14,-13,-18,-16,50,-22,9, 
  /* [1][4][][] */ -17,31,32,2,16,21,-23,40,-25,-21, -48,26,-32,-52,63,17,-9,-14,17,1, -15,-27,-16,-81,-9,14,17,11,-20,-46, 26,-14,1,-26,56,-5,35,0,10,8, -6,-23,25,-9,71,61,18,35,31,35, 
  /* [2][0][][] */ 5,12,-77,30,-29,-18,5,52,-52,-29, -46,36,-30,33,27,-14,-55,93,18,-34, -56,25,39,52,44,113,-46,13,21,-53, -81,48,-37,32,8,37,-113,-9,5,42, -33,37,-29,31,16,-32,-94,-11,99,35, 
  /* [2][1][][] */ -3,7,2,-39,15,65,27,-14,37,1, 26,22,-17,0,-32,9,-19,14,17,-64, 93,-7,-37,18,20,36,-91,66,-3,6, 83,10,-98,21,39,3,-3,-7,13,-13, 36,-56,-98,-50,-68,-64,60,-6,-28,-60, 
  /* [2][2][][] */ -33,-59,-30,-20,22,-4,35,-52,39,-17, -4,-43,-84,83,7,-9,17,-41,36,1, 41,127,-48,-115,103,119,60,71,-8,-70, -6,-11,44,-51,108,71,-21,81,27,-3, -59,-56,59,23,64,36,22,18,82,36, 
  /* [2][3][][] */ -68,21,-15,15,-17,-60,-38,-12,-8,5, 16,8,-25,40,-19,-7,-18,-76,51,-23, -36,45,41,76,67,-6,-17,-10,-28,-48, 5,25,6,10,77,47,-63,-6,15,-41, -50,1,35,-15,64,60,2,-9,4,-12, 
  /* [2][4][][] */ 20,-9,-29,104,-62,-103,-12,-55,-4,33, 39,8,-26,5,-47,-7,8,-30,21,31, 12,-46,-35,67,-67,-3,-70,-41,-10,21, 10,-54,14,-78,-53,-8,0,25,-40,-48, -94,-90,-46,-57,-66,27,-60,-2,-50,-52, 
  /* [3][0][][] */ 28,14,24,63,33,28,45,-9,-35,4, 83,27,-47,-26,-20,14,-26,-17,-7,29, 11,58,-12,11,-34,-8,-33,-72,-18,-80, -52,-20,60,-36,22,4,30,-12,82,-13, 48,-43,27,-9,-38,-11,-49,32,3,127, 
  /* [3][1][][] */ -20,2,2,51,-20,-15,-21,-23,28,23, 21,-29,52,52,46,-6,23,-17,2,-70, 32,-21,-53,36,41,61,24,-41,-37,22, 18,-33,3,24,24,22,-18,1,23,35, 24,-31,29,36,41,35,-11,10,60,31, 
  /* [3][2][][] */ 60,3,13,39,-24,-33,48,-25,-16,-6, 62,-3,-6,33,-68,-7,-38,12,-19,34, -8,31,29,62,15,28,-17,21,-60,-25, -2,-11,-4,28,5,27,0,36,28,-12, -12,22,10,20,-10,18,25,-7,-11,-1, 
  /* [3][3][][] */ -1,17,-43,10,11,7,-3,-22,45,9, 38,18,-30,37,-3,-41,39,-42,22,22, 37,-19,-39,47,-8,2,-10,-23,-40,-26, -9,-2,-10,5,23,12,-7,26,28,-19, 2,-19,-10,21,28,21,15,-8,16,-9, 
  /* [3][4][][] */ -50,-54,-28,29,-35,-29,-1,-20,6,15, 17,-11,10,29,-7,5,31,-29,-12,-15, -24,-19,11,42,-5,14,-5,-37,1,-14, -2,15,12,-5,1,-5,-12,17,30,-19, -34,-20,21,-13,12,-12,-20,-13,30,10, 
  /* [4][0][][] */ 31,51,-12,17,-50,-17,-71,-4,14,13, 7,45,4,-79,58,95,-42,108,76,-86, 30,21,118,62,72,26,7,-13,127,29, -64,-2,44,-48,78,1,57,15,53,27, -25,46,41,-75,30,-61,15,62,-28,67, 
  /* [4][1][][] */ 37,34,46,-73,29,-32,108,96,9,-90, 59,60,-1,-31,-58,-60,33,-11,-71,-26, 94,32,-77,-63,-18,12,-10,6,-103,-17, 5,23,-45,1,25,46,-32,-32,-23,-42, -69,-5,8,-29,20,55,55,-50,13,-9, 
  /* [4][2][][] */ -22,-18,62,-90,64,100,1,68,64,8, 2,-16,24,-64,38,-28,-10,17,6,58, 1,36,39,-59,-24,62,75,69,-34,-3, -32,58,-21,-119,48,21,5,21,-58,-7, 18,-10,39,19,25,57,15,58,34,49, 
  /* [4][3][][] */ -43,30,39,31,-5,-14,-42,-39,-3,10, -47,-35,56,-93,-14,50,-43,5,60,30, -6,2,85,-62,10,37,-46,3,18,-26, 23,39,22,-14,-43,-10,-47,32,-7,27, 48,95,-51,-51,52,-33,-52,31,26,-50, 
  /* [4][4][][] */ 65,28,17,1,5,-23,-4,48,46,-10, 30,66,4,-68,-6,-6,-4,-2,-11,-60, -6,39,11,-4,-48,-8,-49,-5,6,27, 36,31,26,28,-43,-28,-28,-18,-3,25, 1,-6,-19,5,9,-31,40,12,-9,-32, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 5,5,5,10 } };
const TfArray<5, float> quant6_scale = { 5, { 0.0028303766157478094, 0.003104436444118619, 0.0037127353716641665, 0.0046075885184109211, 0.0035841809585690498, } };
const TfArray<5, int> quant6_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[10] = { -250, -260, 678, 471, -186, -981, 2714, -551, 1443, 1297, };
const TfArray<1, int> tensor_dimension7 = { 1, { 10 } };
const TfArray<10, float> quant7_scale = { 10, { 7.080695650074631e-05, 7.5389471021480858e-05, 8.4541388787329197e-05, 6.9557834649458528e-05, 8.2901584391947836e-05, 7.6802622061222792e-05, 7.848054519854486e-05, 6.7496766860131174e-05, 8.4022816736251116e-05, 6.4454980019945651e-05, } };
const TfArray<10, int> quant7_zero = { 10, { 0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[10*5*5*1] = { 
  /* [0][0][][] */ 30, 85, -51, 14, -30, 
  /* [0][1][][] */ 127, 121, -32, 121, 62, 
  /* [0][2][][] */ -2, -95, -2, 67, -82, 
  /* [0][3][][] */ -62, -37, 26, -37, -57, 
  /* [0][4][][] */ -49, -78, -1, -61, -82, 
  /* [1][0][][] */ -73, 13, -43, 32, -9, 
  /* [1][1][][] */ 31, 9, -60, -94, -127, 
  /* [1][2][][] */ -35, 35, 16, 71, 74, 
  /* [1][3][][] */ 51, 111, 108, 39, -7, 
  /* [1][4][][] */ -59, 68, 58, 38, 11, 
  /* [2][0][][] */ -33, -66, -14, -81, -57, 
  /* [2][1][][] */ -11, -84, -72, 66, 127, 
  /* [2][2][][] */ -90, -125, 21, -85, 38, 
  /* [2][3][][] */ -42, 23, 1, 14, 115, 
  /* [2][4][][] */ -25, 25, 3, -62, -23, 
  /* [3][0][][] */ -112, 115, 84, -105, -31, 
  /* [3][1][][] */ -122, 123, -17, -63, 84, 
  /* [3][2][][] */ -42, 101, -102, -95, 127, 
  /* [3][3][][] */ 88, 114, -98, -88, 41, 
  /* [3][4][][] */ 35, 42, -30, 13, 62, 
  /* [4][0][][] */ 127, 113, 99, 68, 63, 
  /* [4][1][][] */ -80, -114, -88, -107, -71, 
  /* [4][2][][] */ -55, -73, -9, -7, 1, 
  /* [4][3][][] */ 5, -3, 41, 81, 50, 
  /* [4][4][][] */ -35, 18, -2, -13, -14, 
  /* [5][0][][] */ 10, 67, 85, 77, 47, 
  /* [5][1][][] */ -103, -81, -106, -96, -89, 
  /* [5][2][][] */ -63, 6, 92, 64, 82, 
  /* [5][3][][] */ -33, -15, 24, 74, 54, 
  /* [5][4][][] */ -127, -58, -77, -1, -37, 
  /* [6][0][][] */ 105, 9, -79, -38, -16, 
  /* [6][1][][] */ -3, -94, -56, -49, 32, 
  /* [6][2][][] */ -127, -89, -1, 64, 45, 
  /* [6][3][][] */ -85, -67, 48, 20, -8, 
  /* [6][4][][] */ 18, -92, -20, -22, 30, 
  /* [7][0][][] */ 9, -64, -127, -56, -26, 
  /* [7][1][][] */ 106, 85, 102, 87, 54, 
  /* [7][2][][] */ -77, -40, -88, -109, -68, 
  /* [7][3][][] */ 13, -36, 53, 48, 50, 
  /* [7][4][][] */ 38, 82, 83, 71, 11, 
  /* [8][0][][] */ 118, 24, 92, 53, 29, 
  /* [8][1][][] */ 42, -29, -127, -85, 76, 
  /* [8][2][][] */ 48, 34, -6, -62, -48, 
  /* [8][3][][] */ 24, -17, 0, 31, 19, 
  /* [8][4][][] */ 67, -58, -2, 51, -16, 
  /* [9][0][][] */ -78, 46, 127, 88, -67, 
  /* [9][1][][] */ -118, -30, -39, -25, 73, 
  /* [9][2][][] */ 102, -29, -23, -21, 120, 
  /* [9][3][][] */ 21, -81, 77, -114, 17, 
  /* [9][4][][] */ -24, -111, 10, 90, -116, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 10,5,5,1 } };
const TfArray<10, float> quant8_scale = { 10, { 0.0031730120535939932, 0.0033783644903451204, 0.0037884816993027925, 0.0031170363072305918, 0.0037149984855204821, 0.0034416909329593182, 0.0035168821923434734, 0.0030246754176914692, 0.0037652431055903435, 0.0028883663471788168, } };
const TfArray<10, int> quant8_zero = { 10, { 0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,10,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.022315375506877899, } };
const TfArray<1, int> quant9_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,10,13,10 } };
const TfArray<1, float> quant10_scale = { 1, { 0.020053500309586525, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,5,7,10 } };
const TfArray<1, float> quant11_scale = { 1, { 0.020053500309586525, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,5,7,5 } };
const TfArray<1, float> quant12_scale = { 1, { 0.028310230001807213, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,3,4,5 } };
const TfArray<1, float> quant13_scale = { 1, { 0.028310230001807213, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,60 } };
const TfArray<1, float> quant14_scale = { 1, { 0.028310230001807213, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,3 } };
const TfArray<1, float> quant15_scale = { 1, { 0.045227311551570892, } };
const TfArray<1, int> quant15_zero = { 1, { 60 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,3 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,6,5 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,4,3 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 130, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 180, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1312, (TfLiteIntArray*)&tensor_dimension9, 130, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 1300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1312, (TfLiteIntArray*)&tensor_dimension11, 350, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1008, (TfLiteIntArray*)&tensor_dimension12, 175, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension13, 60, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 60, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension15, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_AVERAGE_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_AVERAGE_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_AVERAGE_POOL_2D] = Register_AVERAGE_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 8; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
